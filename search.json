[
  {
    "objectID": "five-things.html",
    "href": "five-things.html",
    "title": "Five things you need to know to pass this class",
    "section": "",
    "text": "Here they are, in no particular order.",
    "crumbs": [
      "5 Things to know"
    ]
  },
  {
    "objectID": "five-things.html#read-instructions-carefully",
    "href": "five-things.html#read-instructions-carefully",
    "title": "Five things you need to know to pass this class",
    "section": "1) Read Instructions Carefully",
    "text": "1) Read Instructions Carefully\nYou must carefully read the instructions provided for each assignment. Read, not skim! They contain information vital for the completion of the assigned work.",
    "crumbs": [
      "5 Things to know"
    ]
  },
  {
    "objectID": "five-things.html#do-all-the-assigned-work",
    "href": "five-things.html#do-all-the-assigned-work",
    "title": "Five things you need to know to pass this class",
    "section": "2) Do all the assigned work",
    "text": "2) Do all the assigned work\nThis course is a very hands-on course and requires many hours of practical work outside class and lab. It also requires reviewing ALL the learning materials shared in this website and in bCourses.\nIt goes without saying that you should do all the assigned work: attend lecture and section, review the practice material discussed in lab, and of course do all HW assignments. Keep in mind that the activities and assignments build upon earlier work. So it’s important not to fall behind and avoid leaving gaps along the semester.\nOn the technical side, you should have your own computer, (good) internet connection, and also know how to record a video of both 1) computer’s screen capture, and 2) face capture (e.g. a zoom recording makes this easy). We will provide more detailed instructions about the required tools as we move forward with the semester.",
    "crumbs": [
      "5 Things to know"
    ]
  },
  {
    "objectID": "five-things.html#no-need-to-memorize-all-commands",
    "href": "five-things.html#no-need-to-memorize-all-commands",
    "title": "Five things you need to know to pass this class",
    "section": "3) No need to memorize all commands",
    "text": "3) No need to memorize all commands\nDo you need to memorize all commands? No! We don’t expect that you memorize all commands. In fact, you can find a series of cheatsheets that you can (and should) use at all times (even during quizzes and tests). We will release these soon.\nHowever, we do expect that you learn the most common types of functions in Python and Jupyter notebooks: e.g. print(), ?, etc. More important, we expect that you understand the “logic” and working principles of certain data objects, common programming structures, good practices, etc.",
    "crumbs": [
      "5 Things to know"
    ]
  },
  {
    "objectID": "five-things.html#study-for-tests",
    "href": "five-things.html#study-for-tests",
    "title": "Five things you need to know to pass this class",
    "section": "4) Study for tests",
    "text": "4) Study for tests\nThe exams are a way to test your understanding of the various concepts presented in the course. The exams are also a way to test whether you are really doing all the practical work by yourself.\nIn theory, students who do an honest effort in completing all the assignments (e.g. writing commands, understanding commands, learning the syntax, etc) should be able to get a passing score in these tests.",
    "crumbs": [
      "5 Things to know"
    ]
  },
  {
    "objectID": "five-things.html#what-else-do-you-recommend-to-succeed-in-this-course",
    "href": "five-things.html#what-else-do-you-recommend-to-succeed-in-this-course",
    "title": "Five things you need to know to pass this class",
    "section": "5) What else do you recommend to succeed in this course?",
    "text": "5) What else do you recommend to succeed in this course?\nThis one is hard to answer, in part because it depends on your personal definition of “success”. Simply put, I don’t think there’s a unique recipe for success. Instead, let me answer this question by telling you about the typical factors that may negatively affect your performance:\n\nnot attending lecture and/or lab,\nnot submitting assignments,\nlooking at the solutions of other students and “inadvertently” copy them,\npoor studying/working habits\nbeing afraid/scared/ashamed of asking the teaching staff for help\nyou’ve been doing work of passing quality and you cannot complete the course due to circumstances beyond your control\n\nDon’t underestimate the second to last item. Coding (in any programming language) can be extremely frustrating at times. You would be surprised to hear my collection of student stories about all sorts of bugs, typos, misspellings, and the like, that gave them a fair amount of frustration. So please, ask the teaching staff for help in a timely and respectful manner.\nAs for the last item, please let us know you’ve been affected by circumstances beyond your control as soon as possible. While we cannot guarantee any outcome, we will do what is within our reach to help you in this class.",
    "crumbs": [
      "5 Things to know"
    ]
  },
  {
    "objectID": "five-things.html#acknowledgments",
    "href": "five-things.html#acknowledgments",
    "title": "Five things you need to know to pass this class",
    "section": "Acknowledgments",
    "text": "Acknowledgments\nThe original copy of this text is written by Gaston Sanchez, Stat 133 Spring 2025.",
    "crumbs": [
      "5 Things to know"
    ]
  },
  {
    "objectID": "staff.html",
    "href": "staff.html",
    "title": "Staff",
    "section": "",
    "text": "Office hours are subject to change.\nYou can attend OH of any staff member.\n\n\n\nInstructor: Gaston Sanchez gastonsanchez@berkeley.edu Office hours:  - Fri 4:10pm-5:10pm, Evans 309\n\n\nGSI: Calvin Carter calv2n@berkeley.edu Office hours: - Mon 2pm-4pm, Evans 434 - Wed 12pm-2pm, Evans 434\n\n\nGSI: Huong Vu huong_vu@berkeley.edu Office hours:  - Tue 3-5pm, Evans 434 - Thr 3-5pm, Evans 434\n\n\nGSI: Dylan Webb dylancw@berkeley.edu Office hours:  - Wed 2-5pm, Evans 434 - Fri 2-5pm, on Zoom\n\n\nTutor: David Sun davidzhongyisun@berkeley.edu Office hours:  - Tue 12:30-3pm, Evans 428 - Thr 1-3pm, Evans 446\n\n\nTutor: Evan Passalacqua evanqua@berkeley.edu Office hours:  - Mon 9-11am, Evans 426 - Wed 9-11am, Evans 426"
  },
  {
    "objectID": "01-intro/programming-basics-1.html",
    "href": "01-intro/programming-basics-1.html",
    "title": "Programming Basics I",
    "section": "",
    "text": "Let’s get programming! This is a challenging set of notes because it involves a lot of terminology up-front—expressions, names, operators, assignments, data types, etc.—to describe the fundamentals of writing Python expressions. Getting a handle on the terminology earlier will make it easier to describe the programming concepts. But it does take some memorization…!",
    "crumbs": [
      "Unit 1: Introduction",
      "Programming Basics: I"
    ]
  },
  {
    "objectID": "01-intro/programming-basics-1.html#expressions",
    "href": "01-intro/programming-basics-1.html#expressions",
    "title": "Programming Basics I",
    "section": "Expressions",
    "text": "Expressions\n\n\n\n\n\n\nRead Inferential Thinking\n\n\n\nRead Ch 3.1, which describes in detail how Python evaluates numeric expressions.\nBefore continuing, make sure you understand the terminology:\n\nexpression\nevaluation\nsyntax\noperators\noperands",
    "crumbs": [
      "Unit 1: Introduction",
      "Programming Basics: I"
    ]
  },
  {
    "objectID": "01-intro/programming-basics-1.html#names-and-call-expressions",
    "href": "01-intro/programming-basics-1.html#names-and-call-expressions",
    "title": "Programming Basics I",
    "section": "Names and Call Expressions",
    "text": "Names and Call Expressions\n\n\n\n\n\n\nRead Inferential Thinking\n\n\n\nRead Ch 3.2 and Ch 3.3, which define names and call expressions.\nBefore continuing, make sure you understand the following:\n\nIn Python, a name can be given to a value using an assignment statement (which involves the assignment operator, =).\nA function is a named operation.\nA call expression invokes functions: a function is called on arguments, the argument values are passed into the function; the function then returns the final value to the larger call expression.\nIn Jupyter Notebooks, placing a ? after a function name will bring up a built-in description of that function.\n\nTerminology: - name - assignment statement - function, arguments, return value - call expression\n\n\nOne analogy for names is suitcase tags. Consider the following assignment statement:\n\nx = 3\n\nThis statement assigns the name x to the value 3. Like a suitcase tag, the name x is bound to the value 3.\n\nx\n\n3\n\n\nPython first evaluates the expression on the right-hand side of the = assignment operator, then binds the name x to the resulting value.\nThe below statement re-assigns the name x. Think of this as moving the suitcase tag to a different suitcase.\n\nx = 1 + 2 * 3 - 4 // 5\nx\n\n7\n\n\n\n\n\n\n\n\nAssignment statements are not expressions!\n\n\n\nStatements, when executed, do something. Expressions are a type of statement that, when executed, evaluate to values. In Jupyter Notebook code cells, if the last statement in a cell is not an expression, executing that last statement will not produce an output.\nThe first cell above does not end in an expression and therefore does not produce output. The second cell above has two statements; the last one is an expression, which is displayed in the cell output.",
    "crumbs": [
      "Unit 1: Introduction",
      "Programming Basics: I"
    ]
  },
  {
    "objectID": "01-intro/programming-basics-1.html#data-types",
    "href": "01-intro/programming-basics-1.html#data-types",
    "title": "Programming Basics I",
    "section": "Data Types",
    "text": "Data Types\n\nNumeric Data Types\n\n\n\n\n\n\nRead Inferential Thinking\n\n\n\nRead Ch 4 intro and Ch 4.1, which describes in detail how Python evaluates expressions involving numeric data types.\nBefore continuing, make sure you understand the following:\n\nEvery value has a type (data type), and the built-in type function returns the type of the result of any expression.\nIn Python, integers are called int values. Real numbers are called float values. These are flexible but have some computational limitations.\nThe type of an expression is the type of its final value.\nWhen a float value is combined with an int value using some arithmetic operator, then the result is always a float value.\n\n\n\n\n\nStrings\n\n\n\n\n\n\nRead Inferential Thinking\n\n\n\nRead Ch 4.2 which describes the string data type.\nBefore continuing, make sure you understand the following:\n\nA string is a text data type. It can use single quotes or double quotes.\nThe meaning of an expression depends both upon its structure and the types of values that are being combined.\n\n\n\nThe + operator works differently on string data types. Instead of adding numerically, it “adds textually,” which is more formally called concatenation:\n\n2 + 3  # addition\n\n5\n\n\n\n'hello' + \"donuts\"\n\n'hellodonuts'\n\n\nThere is one function not shown above that would be useful to you know, and that is len(s), which takes a string argument and returns its length.\n\ns = \"hello world\"\nlen(s)\n\n11",
    "crumbs": [
      "Unit 1: Introduction",
      "Programming Basics: I"
    ]
  },
  {
    "objectID": "01-intro/programming-basics-1.html#style-and-debugging",
    "href": "01-intro/programming-basics-1.html#style-and-debugging",
    "title": "Programming Basics I",
    "section": "Style and Debugging",
    "text": "Style and Debugging\nYou may have noticed by now that Jupyter Notebooks are not just by computers to run code; data scientists also use notebooks to understand the purpose of the code. We’d therefore like to establish two habits early:\n\nProgramming Style and Comments\nProgramming style involves writing code that is self-evident and understandable by other human beings. It is not sufficient for your code to be functional, i.e., perform the correct computation. It should also be readable and interpretable, for others to reuse and adapt.\nGood style practices can involve comments, meaningful names, whitespace, markdown cells interspersed with code cells, etc. Ch 3.2 of Inferential Thinking describes meaningful names; we discuss comments below.\nComments are used to explain what code does. Good programmers write code that is self-evident and use comments only where necessary.\nIn Python, you can write comments in the same line as code (“in-line” comments) using #:\n\n3 + 4     # simple arithmetic\n\n7\n\n\nThe above shows that both code and comments can be on the same line. In that line, anything after # is a comment and is not evaluated.\n\n\nDebugging\nDebugging is the process of fixing errors, i.e., bugs, in code. Debugging is a huge process and can take up the majority of your coding time.\nErrors in your code can pop up for any number of reasons! Here are some tips:\nTest your code early and often. If you write a lot of code before testing, then you have that much more code to debug and check. Instead, write a bit, test and check, and keep writing. This will require you to know how to decompose, or break down, your solutions into multiple steps that you can test individually. Once you’re comfortable with one step, move onto the next step. That’s right—it’s abstraction!_ Debugging your code will help you better understand computational concepts.\nGet familiar with reading error messages. When Python errors, it may give messages that are initially cryptic. Try the following.\n\nTake a deep breath.\nActually read the message—don’t just focus on what you think it might say. The error message will often include a meaningful name (e.g., SyntaxError or ZeroDivisionError), the line, and an arrow (marked by ^) to where the error occurred.\nThen, try to explain to yourself why this error occurred, before fixing the error. Many beginning programmers will want skip this step, opting to throw everything at the wall and then, once things are fixed, explain what happened. Instead, slow down and try to understand the problem first. Then the solution will be straightforward.\n\nTrace your code, but not at the expense of testing. Code tracing is the process of analyzing Python code, statement by statement and line by line, to understand program execution. This is a visual process and can sometimes be helped along by diagrams. Learning to trace code is learning procedural thinking—it is a key skill that helps break down exactly what your code is doing. Once you get the hang of tracing your code, you may be tempted to debug by just staring at your code—don’t do this! Instead, develop a healthy balance between developing an understanding of your code and testing if your code does what you expect.",
    "crumbs": [
      "Unit 1: Introduction",
      "Programming Basics: I"
    ]
  },
  {
    "objectID": "01-intro/programming-basics-1.html#summary",
    "href": "01-intro/programming-basics-1.html#summary",
    "title": "Programming Basics I",
    "section": "Summary",
    "text": "Summary\nWe write code to tell our computer what to do.\n\nIn this class, and in many other settings, we use the Python programming language.\nWe write all of our code in Jupyter Notebooks, which allow us to see the output of our code in the same document in which we wrote our code. They’re commonly used in data science.\n\nBasic Python can be thought of as a calculator language, that takes expressions and computes their values.\n\nWe learned several different arithmetic operators, each of which can be used in an expression.\nPython stores integers and decimals in different ways.\n\nDebugging and good style make good programmers.\n\nComments help make our code more readable and sustainable.\nChoose names that are concise but descriptive.\nWhen our code has an error, the error message can help us fix it.\n\n\nCommon Python operators for numeric data types\n\n\n\n\n\n\n\n\nOperator\nSymbol\nExample Expression\nExpression Value\n\n\n\n\nAddition\n+\n2 + 3\n5\n\n\nSubtraction\n-\n15 - 4\n11\n\n\nMultiplication\n*\n-2 * 9\n-18\n\n\nDivision\n/\n15 / 2\n7.5\n\n\nInteger division\nCuts off remainder\n//\n15 // 2\n\n\nRemainder/Modulo\n%\n19 % 3\n1  (19 ÷ 3 = 6 Remainder 1)\n\n\nExponentiation\n**\n3 ** 2\n9",
    "crumbs": [
      "Unit 1: Introduction",
      "Programming Basics: I"
    ]
  },
  {
    "objectID": "01-intro/jupyter-notebook.html",
    "href": "01-intro/jupyter-notebook.html",
    "title": "Jupyter Notebooks",
    "section": "",
    "text": "This course uses the Python 3 programming language in the Jupyter Notebook environment. By the end of this note, you’ll understand what that means.",
    "crumbs": [
      "Unit 1: Introduction",
      "Jupyter Notebooks"
    ]
  },
  {
    "objectID": "01-intro/jupyter-notebook.html#python-3",
    "href": "01-intro/jupyter-notebook.html#python-3",
    "title": "Jupyter Notebooks",
    "section": "Python 3",
    "text": "Python 3\nFrom Wikipedia:\n\nA computer program is a [set or sequence] of instructions in a programming language.\n\nCode refers to a computer program written in a particular programming language. In this class, we use the Python 3 programming language. It is powerful and widely used in many computing applications, from web development, scripting, and scientific computing to data science and machine learning. It’s also extremely popular worldwide (Statista, 2025).\nComputer programs are nothing more than recipes: we write programs that tell the computer exactly what to do, and it does exactly that—nothing more, and nothing less.\nYou may be wondering—how can computers be simultaneously so powerful and so primitive? Why does everything in today’s age involve computers or computational technology? In part, this “age of computing” can considered as a complex system of advanced programs run on powerful computing machines to transform complex data. All three of these components involve human scientists and engineers: to write and design the programs, to collect and structure the data, and to design and build the computing machines.",
    "crumbs": [
      "Unit 1: Introduction",
      "Jupyter Notebooks"
    ]
  },
  {
    "objectID": "01-intro/jupyter-notebook.html#jupyter-notebooks",
    "href": "01-intro/jupyter-notebook.html#jupyter-notebooks",
    "title": "Jupyter Notebooks",
    "section": "Jupyter Notebooks",
    "text": "Jupyter Notebooks\nIn order to run computer programs, we need a way to execute code written in a programming language on a computer. Development, also known as process of designing, iterating, and testing computer programs, often takes place in an environment which can support all of these tasks.\nThe environment we will use is Jupyter Notebook, which allows us to write and run code within a single .ipynb document (i.e., notebook). They also allow us to embedded text and code.\n\n\n\n\n\n\n\nFigure 1: An example of a Jupyter Notebook.\n\n\n\n\nThere’s a lot going on in the above Jupyter Notebook screenshot: there is code, there is output from running code, there are pictures, and there is (non-code) text. We’ll get to understanding all of these components in due time.\nBut this screenshot also elucidates why a tool like Jupyter Notebook is so important to doing data science work. Data Science often requires the use of computation and visualizations and the production of written reports. Notebooks support all three of these, in the same document.\n\n\n\n\n\n\nAside\n\n\n\n\n\nThe Project Jupyter community actually started at UC Berkeley. Professor Fernando Perez of Statistics created an interactive Python environment as part of his graduate studies in Physics, and the rest is history.\n\n\n\n\n\n\n\n\n\nAside 2\n\n\n\n\n\nAside 2: Jupyter can run things other than Python—in fact, Jupyter’s namesake is the three core languages it supports: Julia, Python, and R.\n\n\n\nIf you take more Computer Science and Data Science classes, you will learn about more tools for programming and statistics. In this class we will focus on using Jupyter Notebooks to develop Python code.",
    "crumbs": [
      "Unit 1: Introduction",
      "Jupyter Notebooks"
    ]
  },
  {
    "objectID": "01-intro/jupyter-notebook.html#datahub",
    "href": "01-intro/jupyter-notebook.html#datahub",
    "title": "Jupyter Notebooks",
    "section": "DataHub",
    "text": "DataHub\nDataHub is the web-based environment we will use in this course for developing and running Jupyter Notebooks. Some features:\n\nDataHub is a Berkeley-hosted server that runs Jupyter notebooks.\nAll students have their own DataHub “container”; think of this as your own virtual computer.\nThis is where you will work on all assignments.\nYou will not need to install anything locally (meaning that you could theoretically do all assignments for this class on your phone, but we recommend giving your fingers and your eyes a break). All you need is a web browser.\nCourse staff can access everything in your DataHub to help debug your code.\n\n\n\n\n\n\n\nAccess DataHub\n\n\n\nIn this class, there are two common ways to develop Jupyter Notebooks:\n\nGo to http://datahub.berkeley.edu. Make a new notebook, or open an existing one.\nFrom our course website, often by clicking on code links or assignment links. These will often create a copy of a notebook skeleton, which you can then run or edit.\n\n\n\nGenerally, we will not be creating notebooks from scratch. Instead, the course staff have helped write scaffolding code and instructions for activities that are designed to help you understand the fundamentals.",
    "crumbs": [
      "Unit 1: Introduction",
      "Jupyter Notebooks"
    ]
  },
  {
    "objectID": "01-intro/jupyter-notebook.html#jupyter-notebook-internals",
    "href": "01-intro/jupyter-notebook.html#jupyter-notebook-internals",
    "title": "Jupyter Notebooks",
    "section": "Jupyter Notebook Internals",
    "text": "Jupyter Notebook Internals\n\n\n\n\n\n\nCaution\n\n\n\nIf you have not yet tried interacting with your first Jupyter Notebook yet, this section will not make much sense. We recommend skipping ahead to the next set of notes, then coming back and referring to this as you build more notebooks.\n\n\nJupyter Notebooks are made up of cells. There are two main types of cells:\nCode cells. This is where you write and execute code. When run, Python code cells are evaluated as a Python code snippet, one line at a time. The cell output displayed is the value of the last evaluated expression:\n\n\n\n\n\n\n\nFigure 2: Both expressions are evaluated, but the result of the last expression’s evaluation is considered the output of the code cell.\n\n\n\n\nWe will discuss this output/display phenomenon more in future notes.\nTo run a code cell, you can either hit the “Run” button in the Toolbar, or you can use a keyboard shortcut: &lt;SHIFT&gt;+&lt;ENTER&gt;, which runs the cell and advances to the next cell. We recommend keyboard shortcuts; see below.\nMarkdown cells. This is where you write text and images that aren’t Python code. Markdown is a language used for formatting text. A Markdown cell will always display its formatting when it is not in edit mode.\n\n\n\n\n\n\n\nFigure 3: Left screenshot shows un-evaluated code cell and raw Markdown cell; right screenshot shows evaluated code cell and formatted text. To render formatted text for a selected markdown cell, exit editing mode for that cell. This screenshot starts with the code cell selected, then runs both that code cell and “runs” the markdown cell below.\n\n\n\n\nHere is a guide to Markdown formatting. You’ll explore Markdown more in lab.\n\nKeyboard Shortcuts\nWhile you can manage most of your notebook development by leveraging the Toolbar, many programmers (including me!) prefer using keyboard shortcuts. This minimizes use of the mouse/trackpad and keeps the hands on the keyboard. Together with stretching and taking breaks, keyboard shortcuts will reduce wrist cramps and improve your programming concentration.\nEdit mode vs. command mode: Hit the &lt;ESCAPE&gt; key on your keyboard to switch from edit mode to command mode. Keyboard shortcuts are specific to the mode you’re using:\n\nEdit mode: when you’re actively typing in the cell. Undo is &lt;CTRL/CMD&gt; + Z.\nCommand mode: when you’re not actively typing in the cell. Undo is z.\n\n\n\n\n\n\n\n\n\nAction\nMode\nKeyboard shortcut\n\n\n\n\nRun cell + jump to next cell*\nEither (puts you in edit mode)\n&lt;SHIFT&gt; + &lt;ENTER&gt;\n\n\nRun cell + stay on this cell\nEither (puts you in edit mode)\n&lt;CTRL/CMD&gt; + &lt;ENTER&gt;\n\n\nSave notebook\nEither\n&lt;CTRL/CMD&gt; + &lt;S&gt;\n\n\nSwitch to command mode*\nEither (puts you in command mode)\n&lt;ESCAPE&gt;\n\n\nSwitch to edit mode*\nCommand\n&lt;ENTER&gt;\n\n\nComment out the current line\nEdit\n&lt;CTRL/CMD&gt; + /\n\n\nCreate new cell above/below\nCommand\nA/B\n\n\nDelete cell\nCommand\nDD\n\n\nConvert cell to Markdown\nCommand\nM\n\n\nConvert cell to code\nCommand\nY\n\n\nShow all shortcuts\nCommand\nH\n\n\n\nThe above table should be used as a reference throughout the semester; don’t try to memorize these right now. And remember, you don’t have to use these shortcuts; you can always use the toolbar. Regardless, we’ve annotated the most useful keyboard shortcuts with an asterisk (*).\nThere are plenty more keyboard shortcuts available. Let us know if you find a good guide.",
    "crumbs": [
      "Unit 1: Introduction",
      "Jupyter Notebooks"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "About these Course Notes",
    "section": "",
    "text": "These course notes were compiled and created for Data 6: Introduction to Computational Thinking with Data Science and Society. This is an introductory, interdisciplinary course that focuses on the principles of computational thinking for the purposes exploratory data analysis and computational social science.",
    "crumbs": [
      "Home / About"
    ]
  },
  {
    "objectID": "index.html#disclaimer-is-this-a-textbook",
    "href": "index.html#disclaimer-is-this-a-textbook",
    "title": "About these Course Notes",
    "section": "Disclaimer: Is this a textbook?",
    "text": "Disclaimer: Is this a textbook?\nThese lecture notes are exactly that—lecture notes. That means that while they may follow the beats of class, they may not contain all the context needed to fully understand the course material and its theoretically underpinnings. This is a limitation of this curriculum being new and interdisciplinary. We source from many other foundational texts as needed; these textbook chapters are linked within the lecture notes themselves. You are expected to read these external links.",
    "crumbs": [
      "Home / About"
    ]
  },
  {
    "objectID": "index.html#course-links",
    "href": "index.html#course-links",
    "title": "About these Course Notes",
    "section": "Course Links",
    "text": "Course Links\ndata6.org: Syllabi and assignments for semesters at UC Berkeley.\nWe strongly recommend supplementing the notes presented here with the fantastic foundational texts prepared by UC Berkeley faculty instructors in Stat 20, Data 8, and CS 61A:\n\nData 8: Computational and Inferential Thinking: The Foundations of Data Science, 2nd Edition, by Ani Adhikari, John DeNero, David Wagner.\nCS 61A: Composing Programs, by John DeNero.\nStat 20: Course Notes by Andrew Bray.",
    "crumbs": [
      "Home / About"
    ]
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "About these Course Notes",
    "section": "License",
    "text": "License\nThe contents of this work are licensed for free consumption under the following license: Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International",
    "crumbs": [
      "Home / About"
    ]
  },
  {
    "objectID": "index.html#acknowledgments",
    "href": "index.html#acknowledgments",
    "title": "About these Course Notes",
    "section": "Acknowledgments",
    "text": "Acknowledgments\nMany faculty instructors and teaching assistants have contributed to the creation of Data 6. Special thanks to Suraj Rampure for one of the early iterations of this course.\nThis material is based upon work supported by the U.S. National Science Foundation under award Nos. 2245877, 2245878, 2245879, and the California Learning Lab. Please read more about our DUBOIS project activities here: https://dubois-ctds.github.io/",
    "crumbs": [
      "Home / About"
    ]
  },
  {
    "objectID": "01-intro/rates-incidence.html",
    "href": "01-intro/rates-incidence.html",
    "title": "Application: Rates",
    "section": "",
    "text": "Let’s apply these ideas towards understanding data!\nThe U.S. Center for Disease Control (CDC) regularly examines disease data nationwide and publishes reports for the public.\nConsider the reported U.S. Tuberculosis (TB) cases in 2021 (CDC Morbidity and Mortality Weekly Report (MMWR) 03/25/2022, source). The report summary states:\n\nReported TB incidence (cases per 100,000 persons) increased 9.4%, from 2.2 during 2020 to 2.4 during 2021 but was lower than incidence during 2019 (2.7). Increases occurred among both U.S.-born and non–U.S.-born persons.\n\nGiven just this statement, let’s try to answer the following questions: 1. What is incidence? 1. Incidence is a rate. Why use this rate, and not absolute case sizes? 1. How can we verify the TB incidence columns from the TB cases shown in Table 1? 1. How can we verify the percent change from the TB incidence?\n\n\n\n\n\n\nAside: Summarizing versus Inferring\n\n\n\n\n\nThis statement is a summary of the data: it compares three values, the incidences of 2.7 (in 2019), 2.2 (in 2020), and 2.4 (in 2021). From this interesting observation, the remainder of the report seeks to provide possible explanations for why this observation occurred.",
    "crumbs": [
      "Unit 1: Introduction",
      "Application: Rates and Incidence"
    ]
  },
  {
    "objectID": "01-intro/rates-incidence.html#rates-incidence",
    "href": "01-intro/rates-incidence.html#rates-incidence",
    "title": "Application: Rates",
    "section": "",
    "text": "Let’s apply these ideas towards understanding data!\nThe U.S. Center for Disease Control (CDC) regularly examines disease data nationwide and publishes reports for the public.\nConsider the reported U.S. Tuberculosis (TB) cases in 2021 (CDC Morbidity and Mortality Weekly Report (MMWR) 03/25/2022, source). The report summary states:\n\nReported TB incidence (cases per 100,000 persons) increased 9.4%, from 2.2 during 2020 to 2.4 during 2021 but was lower than incidence during 2019 (2.7). Increases occurred among both U.S.-born and non–U.S.-born persons.\n\nGiven just this statement, let’s try to answer the following questions: 1. What is incidence? 1. Incidence is a rate. Why use this rate, and not absolute case sizes? 1. How can we verify the TB incidence columns from the TB cases shown in Table 1? 1. How can we verify the percent change from the TB incidence?\n\n\n\n\n\n\nAside: Summarizing versus Inferring\n\n\n\n\n\nThis statement is a summary of the data: it compares three values, the incidences of 2.7 (in 2019), 2.2 (in 2020), and 2.4 (in 2021). From this interesting observation, the remainder of the report seeks to provide possible explanations for why this observation occurred.",
    "crumbs": [
      "Unit 1: Introduction",
      "Application: Rates and Incidence"
    ]
  },
  {
    "objectID": "01-intro/programming-basics-2.html",
    "href": "01-intro/programming-basics-2.html",
    "title": "Programing Basics: II",
    "section": "",
    "text": "Let’s apply these ideas towards understanding data!\nThe U.S. Center for Disease Control (CDC) regularly examines disease data nationwide and publishes reports for the public.\nConsider the reported U.S. Tuberculosis (TB) cases in 2021 (CDC Morbidity and Mortality Weekly Report (MMWR) 03/25/2022, source). The report summary states:\n\nReported TB incidence (cases per 100,000 persons) increased 9.4%, from 2.2 during 2020 to 2.4 during 2021 but was lower than incidence during 2019 (2.7). Increases occurred among both U.S.-born and non–U.S.-born persons.\n\nGiven just this statement, let’s try to answer the following questions: 1. What is incidence? 1. Incidence is a rate. Why use this rate, and not absolute case sizes? 1. How can we verify the TB incidence columns from the TB cases shown in Table 1? 1. How can we verify the percent change from the TB incidence?\n\n\n\n\n\n\nAside: Summarizing versus Inferring\n\n\n\n\n\nThis statement is a summary of the data: it compares three values, the incidences of 2.7 (in 2019), 2.2 (in 2020), and 2.4 (in 2021). From this interesting observation, the remainder of the report seeks to provide possible explanations for why this observation occurred.",
    "crumbs": [
      "Unit 1: Introduction",
      "Programming Basics: II"
    ]
  },
  {
    "objectID": "01-intro/programming-basics-2.html#rates-incidence",
    "href": "01-intro/programming-basics-2.html#rates-incidence",
    "title": "Programing Basics: II",
    "section": "",
    "text": "Let’s apply these ideas towards understanding data!\nThe U.S. Center for Disease Control (CDC) regularly examines disease data nationwide and publishes reports for the public.\nConsider the reported U.S. Tuberculosis (TB) cases in 2021 (CDC Morbidity and Mortality Weekly Report (MMWR) 03/25/2022, source). The report summary states:\n\nReported TB incidence (cases per 100,000 persons) increased 9.4%, from 2.2 during 2020 to 2.4 during 2021 but was lower than incidence during 2019 (2.7). Increases occurred among both U.S.-born and non–U.S.-born persons.\n\nGiven just this statement, let’s try to answer the following questions: 1. What is incidence? 1. Incidence is a rate. Why use this rate, and not absolute case sizes? 1. How can we verify the TB incidence columns from the TB cases shown in Table 1? 1. How can we verify the percent change from the TB incidence?\n\n\n\n\n\n\nAside: Summarizing versus Inferring\n\n\n\n\n\nThis statement is a summary of the data: it compares three values, the incidences of 2.7 (in 2019), 2.2 (in 2020), and 2.4 (in 2021). From this interesting observation, the remainder of the report seeks to provide possible explanations for why this observation occurred.",
    "crumbs": [
      "Unit 1: Introduction",
      "Programming Basics: II"
    ]
  },
  {
    "objectID": "01-intro/introduction.html",
    "href": "01-intro/introduction.html",
    "title": "Course Introduction",
    "section": "",
    "text": "Consider this class as an application of computational thinking to data science. Naturally, Data Science can cover multiple contexts, and in this one we focus on social science contexts.\nThree pillars:\n\nComputer Science: Computational Thinking\nData Science: Exploratory data analysis.\nSocial Science: Computational Social Science\n\n(need to translate into learning objectives, but you get it)\nThis course can serve as a precursor to a statistics and inference course like Data 8 or as a standalone introduction to computational thinking for social scientists.",
    "crumbs": [
      "Unit 1: Introduction",
      "About this curriculum"
    ]
  },
  {
    "objectID": "01-intro/introduction.html#what-will-i-learn-in-this-course",
    "href": "01-intro/introduction.html#what-will-i-learn-in-this-course",
    "title": "Course Introduction",
    "section": "",
    "text": "Consider this class as an application of computational thinking to data science. Naturally, Data Science can cover multiple contexts, and in this one we focus on social science contexts.\nThree pillars:\n\nComputer Science: Computational Thinking\nData Science: Exploratory data analysis.\nSocial Science: Computational Social Science\n\n(need to translate into learning objectives, but you get it)\nThis course can serve as a precursor to a statistics and inference course like Data 8 or as a standalone introduction to computational thinking for social scientists.",
    "crumbs": [
      "Unit 1: Introduction",
      "About this curriculum"
    ]
  },
  {
    "objectID": "01-intro/introduction.html#computational-thinking",
    "href": "01-intro/introduction.html#computational-thinking",
    "title": "Course Introduction",
    "section": "Computational Thinking",
    "text": "Computational Thinking\n\nWhat is it?\n\nDefine computational thinking\n\nCommunications of the ACM, Jeanette Wing (PDF) and this follow-up article\n\nComputational Thinking is the thought processes involved in formulating problems and their solutions so that the solutions are represented in a form that can be effectively carried out by an information-processing agent (Cuny, Snyder, and Wing, 2010).\n\n\n\nAbstraction: A Core Concept\nWhat does this definition mean in the age of data?\n\nDefine abstraction\n\n\n“Abstraction gives us the power to scale and deal with complexity.” (Wing, 2010)",
    "crumbs": [
      "Unit 1: Introduction",
      "About this curriculum"
    ]
  },
  {
    "objectID": "01-intro/introduction.html#exploratory-data-analysis",
    "href": "01-intro/introduction.html#exploratory-data-analysis",
    "title": "Course Introduction",
    "section": "Exploratory Data Analysis",
    "text": "Exploratory Data Analysis\nSee Data 8 book: Chapter 1\n\nData Science is about drawing useful conclusions from large and diverse data sets through exploration, prediction, and inference. Exploration involves identifying patterns in information. Prediction involves using information we know to make informed guesses about values we wish we knew. Inference involves quantifying our degree of certainty: will the patterns that we found in our data also appear in new observations? How accurate are our predictions? Our primary tools for exploration are visualizations and descriptive statistics, for prediction are machine learning and optimization, and for inference are statistical tests and models.\n\nFrom Data 8 (1.1 Introduction):\n\nData are descriptions of the world around us, collected through observation and stored on computers. Computers enable us to infer properties of the world from these descriptions. Data science is the discipline of drawing conclusions from data using computation.",
    "crumbs": [
      "Unit 1: Introduction",
      "About this curriculum"
    ]
  },
  {
    "objectID": "01-intro/introduction.html#computational-social-science",
    "href": "01-intro/introduction.html#computational-social-science",
    "title": "Course Introduction",
    "section": "Computational Social Science",
    "text": "Computational Social Science\nWhat does it mean to study social phenomena?\nResearch methodologies: quantitative data, qualitative data\nMost methods contain a mix of both\nHow Define experiments\nIn the real world",
    "crumbs": [
      "Unit 1: Introduction",
      "About this curriculum"
    ]
  },
  {
    "objectID": "01-intro/introduction.html#acknowledgments",
    "href": "01-intro/introduction.html#acknowledgments",
    "title": "Course Introduction",
    "section": "Acknowledgments",
    "text": "Acknowledgments\nData 8 textbook",
    "crumbs": [
      "Unit 1: Introduction",
      "About this curriculum"
    ]
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "STAT 133 is an introductory-to-intermediate level course to computational data analysis with an emphasis on four major cornerstones:\n\n🔢 Understand common data formats, and principles of data manipulation (e.g. wrangling, reshaping, tidying)\n📊 Production of data visualizations and their role in data analysis projects\n💻 Learn basic principles for writing code, and programming concepts (with emphasis on data analysis)\n⚒️ Use computational tools to carry out the data analysis cycle, organize your workflow, and become familiar with reporting tools (via dynamic documents and web-apps)"
  },
  {
    "objectID": "syllabus.html#description",
    "href": "syllabus.html#description",
    "title": "Syllabus",
    "section": "",
    "text": "STAT 133 is an introductory-to-intermediate level course to computational data analysis with an emphasis on four major cornerstones:\n\n🔢 Understand common data formats, and principles of data manipulation (e.g. wrangling, reshaping, tidying)\n📊 Production of data visualizations and their role in data analysis projects\n💻 Learn basic principles for writing code, and programming concepts (with emphasis on data analysis)\n⚒️ Use computational tools to carry out the data analysis cycle, organize your workflow, and become familiar with reporting tools (via dynamic documents and web-apps)"
  },
  {
    "objectID": "syllabus.html#goals",
    "href": "syllabus.html#goals",
    "title": "Syllabus",
    "section": "🎯 Goals",
    "text": "🎯 Goals\nBy the end of the course, students will:\n\nConstruct and execute basic programs in R using elementary programming techniques and tidyverse packages.\nVisualize information and data using appropriate graphical techniques.\nImport data from files or the internet.\nMunge raw data into a tidy format.\nCreate visualizations using geospatial data.\nParse and analyze text documents.\nCreate reproducible documents.\nConstruct interactive web applications."
  },
  {
    "objectID": "syllabus.html#expectations",
    "href": "syllabus.html#expectations",
    "title": "Syllabus",
    "section": "🤞 Expectations",
    "text": "🤞 Expectations\nThis is a computational data analysis course rather than a math or statistics or general programming course. Scripting-based data analysis is a broad topic, so it’s not possible for lecture to provide you with a specific recipe for every situation you may encounter.\nBecause STAT 133 is one of the core courses for Statistics majors, the underlying intention is to provide foundations for “computing with data” so that stat majors, as well as other data-dependent majors (e.g. Data Science, Applied Math, CogSci, Economics, etc), have the basic computational skills for subsequent upper division courses (e.g. STAT 150, 151A, 152, 153, 154, 155, 157, 158, 159).\nWe don’t expect that you become a jedi data scientist, an R ninja, or a super coder. That takes YEARS of practice, training, learning, and collaboration. Instead, we want to give you a good foundation around tools for computational data analysis."
  },
  {
    "objectID": "syllabus.html#ℹ-prerequisites",
    "href": "syllabus.html#ℹ-prerequisites",
    "title": "Syllabus",
    "section": "ℹ️ Prerequisites",
    "text": "ℹ️ Prerequisites\nThis course does not have any prerequisites, although it would be nice if you have taken an introductory course in statistics (e.g. STAT 2, 20, 21, 131A).\nThe curriculum and format is designed specifically for students (ideally majoring in Statistics or minoring in Data Science) who have no-or-minimum programming experience. You also don’t need previous data analysis experience—although it helps if you do.\nStudents with some prior experience in either computational statistics or computing are welcome to enroll, though some parts of the course might feel extremely slow. We recommend that you take more advanced courses unless you need STAT 133 because of your major/minor’s requirements.\n\n\n\nCartoon by John McPherson"
  },
  {
    "objectID": "syllabus.html#course-culture",
    "href": "syllabus.html#course-culture",
    "title": "Syllabus",
    "section": "🏫 Course Culture",
    "text": "🏫 Course Culture\nStudents taking STAT 133 come from a wide range of backgrounds. We hope to foster an inclusive and supportive learning environment based on curiosity rather than competition. All members of the course community—the instructor, GSIs, students, tutors, and readers—are expected to treat each other with courtesy and respect.\nYou will be interacting with course staff and fellow students in several different environments: in class, in lab, over the discussion forum, and in office hours. Some of these will be in person, some of them will be online, but the same expectations hold: be kind, be respectful, be professional.\nIf you are concerned about classroom environment issues created by other students or course staff, please come talk to us about it."
  },
  {
    "objectID": "syllabus.html#textbooks",
    "href": "syllabus.html#textbooks",
    "title": "Syllabus",
    "section": "📚 Textbooks",
    "text": "📚 Textbooks\nWe’ll be using a handful of textbooks (most of them based on the notes I’ve authored for STAT 133 in the last 9 years):\n\nhttps://www.gastonsanchez.com/R-coding-basics/\nhttps://www.gastonsanchez.com/R-tidy-hurricanes/\nhttps://www.gastonsanchez.com/R-rolling-dice/\nhttps://www.gastonsanchez.com/R-for-strings/\nhttps://www.gastonsanchez.com/R-web-technologies/\nhttps://www.tidytextmining.com/ (by Julia Silge and David Robinson)"
  },
  {
    "objectID": "syllabus.html#computational-tools",
    "href": "syllabus.html#computational-tools",
    "title": "Syllabus",
    "section": "🔧 Computational Tools",
    "text": "🔧 Computational Tools\nWe will be mainly using the computing and programming environment R (via RStudio) to analyze data in this class. We may also ask you to use a command line interface to interact with your operating system. You do need your own computer to use R and do the assignments.\nWe don’t expect that students have already been exposed to R. For those who come from Data 8 or some previous coding experience in python, the first labs will help you transfer that knowledge over to R. Both languages are excellent platforms for analyzing data, are widely used in data science, and have their individual strengths. R has been developed within the statistics community specifically for data analysis, while python is a general-purpose programming language but has large data analysis capabilities.\nThe lectures tend to be focused on the data analysis concepts, while learning how to apply/use them in R tend to be the focus of the labs and assignments. Do not be surprised or worried about not following the details of R code during class—that is not the point (furthermore, there will sometimes be code that is really specific to the instructional purposes of the lecture, e.g. to make a specific plot, and is beyond the scope of what you would be expected to understand or know how to do it by yourself)."
  },
  {
    "objectID": "syllabus.html#waitlisted-students-and-late-joining",
    "href": "syllabus.html#waitlisted-students-and-late-joining",
    "title": "Syllabus",
    "section": "⏳ Waitlisted Students and Late Joining",
    "text": "⏳ Waitlisted Students and Late Joining\nIf you are on the waiting list or have a pending application or added the course late, you must still do all coursework and complete labs and homework by the deadlines. We will not be offering extensions/exceptions if you are admitted/enrolled into the course later. So it is your responsibility to stay up to date on the assignments.\nUnfortunately, doing all the work is not a guarantee of enrollment. You will only be enrolled if there is space in your lab. Enrollment will proceed by CalCentral."
  },
  {
    "objectID": "syllabus.html#office-hours",
    "href": "syllabus.html#office-hours",
    "title": "Syllabus",
    "section": "🚪 Office hours",
    "text": "🚪 Office hours\nMe (the instructor) and the GSIs will offer office hours each week across a range of times. You are welcome to visit the office hours of any instructor, not just the ones of your GSI. We may adjust the office hour schedule throughout the semester as we understand student needs and preferences. Please check the office hours tab on the staff page to see the times of the various OH sessions.\nI should also say that OH are an opportunity to chat one-on-one with me. If you can, please come to my office hours! Coming to OH does not necessarily send a signal that you are behind or need extra help. On the contrary, coming to office hours early and often tends to co-occur with success in the course. I am happy to chat about the course material, statistics in general, careers in statistics, and whatever other statistics or data science topics are on your mind!"
  },
  {
    "objectID": "syllabus.html#group-tutoring",
    "href": "syllabus.html#group-tutoring",
    "title": "Syllabus",
    "section": "🎒 Group Tutoring",
    "text": "🎒 Group Tutoring\nTutors will offer group tutoring sessions several times each week. This is an opportunity to finish up any assignments that you’ve started in class or review any topics that are confusing for you. You’re welcome to attend any session that works well for your schedule.\nGroup tutoring is a great place to go to meet other students and collaborate on assignments with tutors on hand to help you get unstuck."
  },
  {
    "objectID": "syllabus.html#labs-10-of-final-grade",
    "href": "syllabus.html#labs-10-of-final-grade",
    "title": "Syllabus",
    "section": "🔬 Labs (10% of final grade)",
    "text": "🔬 Labs (10% of final grade)\n\nWeekly lab discussions are an essential part of the course and we will introduce concepts not necessarily covered in class.\nThursdays are the official days for lab section.\nYou must attend the lab section you are officially enrolled in.\nDuring lab, you will work on short-form assignments designed to apply the concepts on real and simulated data sets.\nWe have designed the labs to be completed within the allotted time (~2 hrs), assuming that you attend section.\nLab assignments will be released every Thursday (available in bCourses),\nThe due date is always on a Friday (please check the assignments tab in bCourses to keep track of deadlines).\nSolutions to lab assignments will be available a few days after their due date.\nWe will be giving credit on lab assignments based on completion.\nSubmissions within 24 hours after the deadline will receive a 15% deduction. Submissions that are 24 hours or more after the deadline will receive no credit.\nThe first lab assignment (lab-1) does not count toward your grade.\nOf all lab assignments (lab-2 to lab-14), your lowest 2 scores will be dropped in the calculation of your overall grade."
  },
  {
    "objectID": "syllabus.html#problem-sets-35-of-final-grade",
    "href": "syllabus.html#problem-sets-35-of-final-grade",
    "title": "Syllabus",
    "section": "📁 Problem Sets (35% of final grade)",
    "text": "📁 Problem Sets (35% of final grade)\n\nThere will be 6 Problem-Set (PS) assignments (available in bCourses).\nPS are long-form assignments designed to apply the concepts you’ve learned in class and lab.\nStarting on week-2 they will be assigned every week, until week-7.\nThe due date is always on a Friday (please check the assignments tab in bCourses to keep track of deadlines).\nYou must write your own answers (using your own words and/or code). Copy and plagiarism will not be tolerated (see Academic Honesty policy).\nIf you don’t submit all required files, you will receive an automatic 10% deduction.\nIf you submit the incorrect files, you will receive no credit.\nSolutions will become available a few days (e.g. 3-4 days) after the due date.\nWe will drop the lowest Problem-Set assignment score in the calculation of your overall grade."
  },
  {
    "objectID": "syllabus.html#app-projects-27-of-final-grade",
    "href": "syllabus.html#app-projects-27-of-final-grade",
    "title": "Syllabus",
    "section": "📂 App Projects (27% of final grade)",
    "text": "📂 App Projects (27% of final grade)\n\nThere will be about 3 Shiny App projects.\nThese are larger assignments intended to combine many of the ideas from the course, in order to create interactive web-apps.\nAs part of the submission you will have to record a video (with screen and face capture) in which you describe how to use your app, and explain the performed analysis and some of the obtained results.\nStarting on week-8 app projects will be assigned about every two weeks, until the end of instruction.\nWe will not drop any of the App assignment scores in the calculation of your overall grade."
  },
  {
    "objectID": "syllabus.html#late-policy-and-hw-assignment-extensions",
    "href": "syllabus.html#late-policy-and-hw-assignment-extensions",
    "title": "Syllabus",
    "section": "🕚 Late Policy and HW Assignment Extensions",
    "text": "🕚 Late Policy and HW Assignment Extensions\nIf you cannot turn in a HW assignment on time, our default policy is:\n\nSubmissions within 24 hours after the deadline will receive a 15% deduction.\nSubmissions within 48 hours after the deadline will receive a 30% deduction.\nSubmissions that are 48 hours or more after the deadline will receive no credit.\n\nRequesting an extension: If you need to request an extension, regardless of your DSP status, fill out this google form. Submissions to this form will be visible only to the course staff members.\n\nAny first-time request for a 1-day extension on a problem set assignment, made before an assignment’s deadline, will be guaranteed to be approved, so long as it is made in good faith.\nAny first-time request for a 1-day extension on a shiny app assignment, made before an assignment’s deadline, will be guaranteed to be approved, so long as it is made in good faith.\nAny occasional request for a 2-day extension (requested before an assignment’s deadline) made by a student with a DSP accommodation for assignment extensions will be approved automatically.\n\nAlso, please keep in mind that we are dropping the lowest score of your six Problem-set assignments (do not confuse with App projects). This policy is in place to take care of any extenuating circumstances that prevent you from submitting one of these assignments.\nPlease plan ahead and pace yourself. Don’t wait until the last day to do an assignment. Don’t wait until the last minute to submit your assignments."
  },
  {
    "objectID": "syllabus.html#midterm-7-of-final-grade",
    "href": "syllabus.html#midterm-7-of-final-grade",
    "title": "Syllabus",
    "section": "📝 Midterm (7% of final grade)",
    "text": "📝 Midterm (7% of final grade)\n\nThere will be one midterm assigned on Wed Mar-5th.\nMore information about the midterm will be announced as we approach its due date.\nUnless you have approved accommodations, we won’t be able to provide any extensions if you miss the midterm."
  },
  {
    "objectID": "syllabus.html#final-exam-21-of-final-grade",
    "href": "syllabus.html#final-exam-21-of-final-grade",
    "title": "Syllabus",
    "section": "📝 Final Exam (21% of final grade)",
    "text": "📝 Final Exam (21% of final grade)\n\nThere will be one final exam.\nThe final exam will be on Wed May-14th (7pm-10pm), as scheduled by the University.\nMore information about the final exam will be provided as we approach its due date.\nUnless you have accommodations as determined by the university and approved by the instructor, you must take the exam at the date and times provided here.\nPlease check your course schedule and make sure that you can take the final exam on the scheduled date. Otherwise, do not take the class if you are not available at this date."
  },
  {
    "objectID": "syllabus.html#grading-structure",
    "href": "syllabus.html#grading-structure",
    "title": "Syllabus",
    "section": "💯 Grading Structure",
    "text": "💯 Grading Structure\nGrades will be assigned using the following weighted components:\n\n10% Lab (drop 2 lowest scores)\n35% Psets (drop lowest score)\n8% App1 (no drop)\n9% App2 (no drop)\n10% App3 (no drop)\n7% Midterm\n21% Final Exam\n\n\nTo complete the course, you must take the final exam.\nTo try to keep grading consistent across semesters, I may occasionally curve an individual assignment. I will do this only if I made the assignment or exam harder than I intended, and no one’s scores will decrease as a result of the curve. This will happen very rarely, probably not at all.\nTo give you a rough idea of the grading scheme, the assignment of letter grades in previous semesters has been as follows:\n\n😀 90-100% (Excellent) A-/A/A+ range\n🙂 80-90% (Good) B-/B/B+ range\n😐 70-80% (Fair) C-/C/C+ range\n🙁 60-70% (Deficient) D\n😞 Below 60% (Failed) F\n\nIf you are taking the class pass-fail, the cut-oﬀ for passing is 70% (C-).\nAs a matter of course policy, I do not round up when calculating letter grades. Ex: if your overall score is 79.9999%, then the highest letter grade that you can expect is a C+, not a B-.\nThere is no curve; your grade will depend only on how well you do, and not on how well everyone else does.\nLetter grades are final; I don’t enter into negotiations with students about grades.\nPlease do not engage in grade grubbing.\nAlso, please remember that we grade your course performance, not your personal worth."
  },
  {
    "objectID": "syllabus.html#generative-a.i.-policy",
    "href": "syllabus.html#generative-a.i.-policy",
    "title": "Syllabus",
    "section": "⚠️ Generative A.I. Policy",
    "text": "⚠️ Generative A.I. Policy\nGenerative A.I. refers to artificial intelligence technologies, like those used for ChatGPT and similar, that can draw on a large corpus of training data to create new written, visual, or audio content.\nThere are two principles we use to guide our class policy on AI use:\n\nCognitive dimension: Working with AI should not reduce your ability to think clearly. The use of AI should facilitate—rather than hinder—learning.\nEthical dimension: Students using AI should be transparent about their use and make sure it aligns with academic integrity.\n\nIn this course, we’ll be developing skills that are important to practice on your own. Because use of generative A.I. may inhibit the development of those skills, the use of these tools is permitted in this course for the following activities:\n\nBrainstorming and refining your ideas;\nFine tuning your exploratory/research questions;\nDrafting an outline to organize your thoughts;\nChecking syntax errors or bugs in your code; and\nPolishing your spelling and grammar.\n\nThe use of generative A.I. tools is not permitted in this course for the following activities:\n\nImpersonating you in classroom contexts, such as by using the tool to compose discussion board prompts assigned to you or content that you put into a discussion forum/chat.\nAttempting to pass off AI-generated work as your own.\nWriting a draft of your assignment.\nWriting entire blocks of code, functions, or scripts to complete class assignments.\n\nPlease keep in mind that use of generative A.I. tools can impede your learning by generating ideas for you before you had a chance to think of your own ideas; inhibiting the development of your own writing skills; generating factually inaccurate statements or fictional reference sources; etc.\nIf you are unsure of whether and how much of a submission has been AI-generated, or whether you are in violation of a certain policy, please reach out to us and ask for guidance."
  },
  {
    "objectID": "syllabus.html#academic-honesty",
    "href": "syllabus.html#academic-honesty",
    "title": "Syllabus",
    "section": "☝️ Academic Honesty",
    "text": "☝️ Academic Honesty\nYou should not share your code or answers, directly or indirectly, with other students. Doing so doesn’t help them; it just sets them up for trouble on exams. Feel free to discuss the problems with others beforehand, but not the solutions. Please complete your own work and keep it to yourself (e.g. avoid sharing it in hosting platforms like Github or similar). If you suspect other people may be plagiarizing you, let us know ASAP.\nWe expect you to do your own work and to uphold the standards of intellectual integrity. Collaborating on homework is fine and we encourage you to work together—but copying is not, nor is having somebody else submit assignments for you. Likewise, obtaining and/or using solutions from previous years or from the internet, if such happen to be available, is considered cheating.\nBeyond the templates or starting code provided by the teaching staff, any writing, code, media, or other submissions not explicitly identified as AI-generated will be assumed as original to the student. Submitting AI-generated work without identifying it as such will be considered a violation of the Code of Student Conduct.\nCheating will not be tolerated. Any evidence of academic misconduct will result in a score of zero (0) on the entire assignment or examination, and a failing letter grade. We will always report incidences of cheating to the Center for Student Conduct.\nIf you are having trouble with an assignment or studying for an exam, or if you are uncertain about permissible and impermissible conduct or collaboration, please contact us.\nRather than copying someone else’s work, ask for help. You are not alone in this course! The course staff is here to help you succeed. If you invest the time to learn the material and complete the projects, you won’t need to copy any answers."
  },
  {
    "objectID": "syllabus.html#email-policy",
    "href": "syllabus.html#email-policy",
    "title": "Syllabus",
    "section": "✉️ Email Policy",
    "text": "✉️ Email Policy\nIf you wish for your email to make it into our inbox, the subject of your email must contain the text: Stat 133.\nPlease refer to my email guidelines for more information: communication via email"
  },
  {
    "objectID": "syllabus.html#special-accommodations",
    "href": "syllabus.html#special-accommodations",
    "title": "Syllabus",
    "section": "🚸 Special Accommodations",
    "text": "🚸 Special Accommodations\nStudents needing accommodations for any physical, psychological, or learning disability, should contact the teaching staff during the first two weeks of the semester, and see http://dsp.berkeley.edu to learn about Berkeley’s policy. If you are a DSP student, please contact us at least three weeks prior to a midterm or final so that we can work out acceptable accommodations.\nFor relevant DSP accommodations that provide occasional extensions on assignments, please see the above Late Policy."
  },
  {
    "objectID": "syllabus.html#incomplete-grade",
    "href": "syllabus.html#incomplete-grade",
    "title": "Syllabus",
    "section": "❗Incomplete Grade",
    "text": "❗Incomplete Grade\nUnder emergency/special circumstances, students may petition me to receive an Incomplete grade. By University policy, for a student to get an Incomplete requires (i) that the student was performing passing-level work until the time that (ii) something happened that—through no fault of the student—prevented the student from completing the coursework. If you take the final, you completed the course, even if you took it while ill, exhausted, mourning, etc. The time to talk to me about incomplete grades is BEFORE you take the final (several weeks before), when the situation that prevents you from finishing the course presents itself. Please clearly state your reasoning in your comments to me.\nIt is your responsibility to develop good time management skills, good studying habits, know your limits, and learn to ask for professional help. Life happens. Social, family, cultural, scholar, and individual circumstances can affect your performance (both positive and negatively). If you find yourself in a situation that raises concerns about passing the course, please contact me as soon as possible.\nAbove all, please-please-please do not wait till the end of the semester to share your concerns about passing the course because it will be too late by then."
  },
  {
    "objectID": "syllabus.html#safe-and-inclusive-environment",
    "href": "syllabus.html#safe-and-inclusive-environment",
    "title": "Syllabus",
    "section": "🌻 Safe and Inclusive Environment",
    "text": "🌻 Safe and Inclusive Environment\nWhenever a faculty member, staff member, post-doc, or GSI is responsible for the supervision of a student, a personal relationship between them of a romantic or sexual nature, even if consensual, is against university policy. Any such relationship jeopardizes the integrity of the educational process.\nAlthough faculty and staff can act as excellent resources for students, you should be aware that they are required to report any violations of this campus policy. If you wish to have a confidential discussion on matters related to this policy, you may contact the Confidential Care Advocates on campus for support related to counseling or sensitive issues. Appointments can be made by calling (510) 642-1988.\nThe classroom, lab, and work place should be safe and inclusive environments for everyone. The Office for the Prevention of Harassment and Discrimination (OPHD) is responsible for ensuring the University provides an environment for faculty, staff and students that is free from discrimination and harassment on the basis of categories including race, color, national origin, age, sex, gender, gender identity, and sexual orientation. Questions or concerns? Call (510) 643-7985, email ask_ophd@berkeley.edu, or go to https://svsh.berkeley.edu/."
  },
  {
    "objectID": "syllabus.html#last-but-not-least",
    "href": "syllabus.html#last-but-not-least",
    "title": "Syllabus",
    "section": "🎉 Last But Not Least",
    "text": "🎉 Last But Not Least\nThe main goal of STAT 133 is that you should learn, and have a fantastic experience doing so. Please keep that goal in mind throughout the semester."
  }
]