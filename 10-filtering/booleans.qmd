---
title: "Booleans"
subtitle: "Understanding True/False values"
---

## What are Booleans?

The `bool` (Boolean) data type has only two possible values: `True` and `False`. These are Python keywords with special meanings. They represent the fundamental concept of truth in programming.

```{python}
True
```

```{python}
False
```

```{python}
type(True)
```

```{python}
type(False)
```

## Boolean Values in Data Science

In data analysis, boolean values are incredibly useful for representing binary variables:

- **Yes/No questions**: "Did the student pass the exam?"
- **On/Off states**: "Is the feature enabled?"
- **High/Low categories**: "Is the score above average?"
- **Presence/Absence**: "Does the text contain this word?"

## Working with Booleans

### Boolean Arithmetic

Interestingly, `True` and `False` can be treated as numbers in Python:

```{python}
True + True
```

```{python}
False + True
```

```{python}
True * 5
```

```{python}
False * 10
```

::: {.callout-note title="Boolean Values as Numbers"}
- `True` is equivalent to `1`
- `False` is equivalent to `0`

This property is useful for counting and calculations, but be careful not to rely on it too heavily. It's better to be explicit about what you're doing.
:::

## Important Rules

::: {.callout-warning title="Boolean Keywords are Reserved"}
`True` and `False` are Python keywords and **cannot be used as variable names**. This is similar to how you can't use numbers like `3` or strings like `"hello"` as variable names.
:::

```{python}
#| error: true
# This will cause an error - True cannot be used as a variable name
True = 5
```

```{python}
#| error: true
# This will also cause an error
3 = 4
```

## Booleans: The Key to Automatic Selection

Remember our problem from the last section? We wanted to find all states with SAT scores above 1600, but `.take()` only lets us select specific rows by position. **Boolean values solve this problem!** They let us create **conditions** that can be automatically evaluated for every row.

### The Boolean Solution

Instead of manually selecting rows, we have a function that can automatically select rows based on a condition (True/False values). But how do we actually use these True/False values to select rows? That's where **`.where()`** comes in!

## Why Booleans Matter for Filtering

Boolean values are the foundation of filtering operations. When we filter data, we're essentially asking "Is this condition True or False for each row?" The rows where the condition is `True` are kept, and the rows where it's `False` are removed.

**In the next section**, we'll learn about `.where()`, the method that automatically picks out all the rows where our boolean conditions are `True`!