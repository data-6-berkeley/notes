---
title: "[Lec 07] Data 6 Fall 2024 - Table Fundamentals"
---

## Slide 1: Table Fundamentals

- Data 6 Fall 2024
- LECTURE 07
- Learning how to work with tables in Python.
- Developed by students and faculty at UC Berkeley and Tuskegee University

## Slide 2: Week 4

- See Ed!
- Announcements!

## Slide 3: Today’s Roadmap

- Table Attributes and Methods
- select, drop, and add columns
- Create new tables
- More Table Methods and Documentation
- Demo: WNBA Data
- Lecture 07, Data 6 Fall 2024

## Slide 4: Data 6 Content

- Module 1
- Introduction to Python and Jupyter Notebooks
- Module 2
- Arrays & Table Methods
- Module 3
- Data Visualization
- Module 4
- Societal Context & Final Project

## Slide 5: Exploratory Data Analysis

- John Tukey (1915-2000) was a Princeton Mathematician & Statisticianand an Early Data Scientist. He coined the phrase Exploratory Data Analysis (EDA).
- [Data Analysis & Statistics, Tukey 1965; Image from LIFE Magazine]
- EDA is like detective work:
- Exploratory data analysis is an attitude, a state offlexibility, a willingness to look for those things thatwe believe are not there, as well as those thatwe believe to be there.
- Today we will perform EDA by analyzing tables using Python.

<details><summary>Speaker notes</summary>

divide-and-conquer algorithm that recursively breaks down a DFT 

John Tukey, Princeton mathematician and statistician, inventor of the Fast Fourier Transform and father of Exploratory Data Analysis.  Also coined the word “bit”.

Emphasis courtesy Jeff Heer, U. Washington

</details>

## Slide 6: Review: Table

- Review: In this course, we often start with tabular data and perform EDA:
- Columns
- Rows (also known as records).
- row
- column

<details><summary>Speaker notes</summary>

“Data” are systematically collected elements of information about the
world. They can be qualitative or quantitative in style. Sometimes data
are collected to evaluate a very specific theory, but not so infrequently,
scholars collect data before knowing precisely what they are interested
in finding out. Moreover, even if data are collected to evaluate a specific hypothesis, researchers may ultimately be interested in questions
that had not occurred to them previously.

</details>

## Slide 7: Today’s goals

- If you are new to programming, it is easy to get lost in the syntax of Python! For today, we will therefore focus on two meta-goals:
- How to translate your existing critical thinking skills and propensity for EDA into algorithmic thinking with Python Tables
- How to read Python documentation to find what you want
- How to debug code systematically
- Review: In this course, we often start with tabular data and perform EDA:
- Columns
- Rows (also known as records).

<details><summary>Speaker notes</summary>

“Data” are systematically collected elements of information about the
world. They can be qualitative or quantitative in style. Sometimes data
are collected to evaluate a very specific theory, but not so infrequently,
scholars collect data before knowing precisely what they are interested
in finding out. Moreover, even if data are collected to evaluate a specific hypothesis, researchers may ultimately be interested in questions
that had not occurred to them previously.

</details>

## Slide 8: Table Attributes and Methods

- 1. Table Attributes and Methods
- 2. select, drop, and add columns
- 3. Create new tables
- 5. More Table Methods and Documentation
- 6. Demo: WNBA Data
- ➤

## Slide 9: First, assign a Table to a name

- To work with this table, we first load it in from a file called data/cal\_unis.csv:
- schools = Table.read\_table('data/cal\_unis.csv')
- This lecture we will return to the dataset of public four-year colleges and universities in California (source):
- assigns RHS value to schools name
- returns a datascience Table from the given data file
- Then we use schools to call Table methods and attributes.
- Always assign your table to a name!

## Slide 10: Next, use the documentation

- We start with asking early questions about the table, such as \# rows, \# columns, and getting specific columns.
- Note the return types!
- Note the different syntax (more later).
- Access Fa24 datascience documentation: here

## Slide 11: Quick check

- We start with asking early questions about the table, such as \# rows, \# columns, and getting specific columns.
- Note the return types!
- Note the different syntax (more later).
- Using the documentation, fill in the following code to:
- Assign ncols to the number of columns in schools
- Assign arr to the Name column, but only use integer arguments
- Access Fa24 datascience documentation: here

## Slide 12: Attributes vs. Methods

- Table attributes
- Properties/ characteristics of the given data type (in this case, datascience.Table)
- Table methods
- Functions that are called on a given data science table (in this case, schools)
- All table methods return copies of information from the original table!
- Very important Python  datascience library paradigm

## Slide 13: What is going to happen? .take, .sort

- What will be the output of each cell? Example: A, B, C means the outputs are table A, then table B, then table C.
- schools(before cells are run)

## Slide 14: What is going to happen? .take, .sort

- What will be the output of each cell? Example: A, B, C means the outputs are table A, then table B, then table C.
- E. Error
- D.
- A.
- B.
- C.

## Slide 15: Select, drop, and add columns

- ➤
- 1. Table Attributes and Methods
- 2. select, drop, and add columns
- 3. Create new tables
- 5. More Table Methods and Documentation
- 6. Demo: WNBA Data

## Slide 16: Column-first paradigm

- Because columns represent variables, we will first learn a column-first approach to tables:
- (Next week, we’ll learn how to edit specific rows; for now we won’t).
- tbl.select(...) returns a new table with a subset of columns.
- tbl.drop(...) and returns a new table without a subset of columns
- tbl.with\_columns(...) returns a new table with additional new column(s).
- Now to the notebook for two demos!

<details><summary>Speaker notes</summary>

Teacher notes
Demo 1 - run the cells, hide the explanation, then explain. Make sure to reset before moving onto the next activity

Demo 2 - add in two new columns, one after the other. The demo code is intentionally hidden in the notebook.

</details>

## Slide 17: Reorder Columns

- How do we reorder the columns to get the following table?
- Hint: use one of .select, .drop, or .with\_columns.

## Slide 18: Reorder Columns: Solution

- How do we reorder the columns to get the following table?

## Slide 19: Create new tables

- ➤
- 1. Table Attributes and Methods
- 2. select, drop, and add columns
- 3. Create new tables
- 4. More Table Methods and Documentation
- 5. Demo: WNBA Data

## Slide 20: What does the following code do?

## Slide 21: What does the following code do? Solution

## Slide 22: What does the following code do? Solution

- Add 3 columns that have these labels…
- …and that have these values.

## Slide 23: Good programming style

- Use whitespace to your advantage!
- As a human, why is the code above potentially easier to read than the code below?

## Slide 24: More Table Methods and Documentation

- ➤
- 1. Table Attributes and Methods
- 2. select, drop, and add columns
- 3. Create new tables
- 4. More Table Methods and Documentation
- 5. Demo: WNBA Data

## Slide 25: (1/3) Navigating documentation

- Early programmers often find documentation the most challenging.
- Suppose we have our schools table:
- How do we get all the column labels of schools?
- How do we update schools such that the column Name is renamed University?

## Slide 26: (1/3) Navigating documentation

- Early programmers often find documentation the most challenging.
- Suppose we have our schools table:
- How do we get all the column labels of schools?
- How do we update schools such that the column Name is renamed University?
- Python tuple datatype(fixed, ordered list of values)

## Slide 27: (2/3) Navigating documentation:Filtering with where

- Often times, we will want to filter the rows of a table based on a specific condition, i.e., get only the rows where some condition is true.
- How do we get a table with all of the UC schools?
- How do we get a table with all the schools in Los Angeles?
- \# 1
- \# 2
- We will learn more complicated uses of .where later in the course (“Predicates”), but for now we filter only on exact matches.

## Slide 28: (3/3) Navigating documentation:Be careful with .show

- The following cells exhibit a tricky, but potentially common bug.
- When run in sequence, why does the last cell throw an error?
- Despite this, what might be a good use case for using .show?

## Slide 29: (3/3) Navigating documentation:Be careful with .show

- The following cells exhibit a tricky, but potentially common bug.
- When run in sequence, why does the last cell throw an error?
- .show is purely for display purposes. It does not return anything—i.e., it returns None.
- The second cell therefore assigns schools to None!

## Slide 30: (3/3) Navigating documentation:Be careful with .show

- The following cells exhibit a tricky, but potentially common bug.
- When run in sequence, why does the last cell throw an error?
- Despite this, what might be a good use case for using .show?
- .show is useful when you want to display intermediate output for debugging purposes.

## Slide 31: Even More Practice

- (There are a few extra exercises in today’s lecture notebook for you to check out on your own time.)

## Slide 32: In Conclusion…

## Slide 33: Recap

- Tables!
- Columns and Variables
- Table Methods
- https://docs.google.com/forms/d/e/1FAIpQLSeHdmtEa3WahCRcDnW6o4oRxFb49eihAcs6elUnKNy9CNoEiw/viewform?usp=sf\_link
- More Table Methods
- Next Time

